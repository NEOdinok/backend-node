/**
 * üìö –ó–∞–¥–∞–Ω–∏–µ:
 * –†–µ–∞–ª–∏–∑—É–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å `SortLimited` —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º generic –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤.
 */

class BubbleSort {
  sort(array: (string | number)[]): (string | number)[] {
    return [] as (string | number)[];
  }
}

class QuickSort {
  sort(array: (string | number)[]): (string | number)[] {
    return [] as (string | number)[];
  }
}

class MergeSort {
  sort(array: (string | number)[]): (string | number)[] {
    return [] as (string | number)[];
  }
}

class Sort {
  constructor(
    public array: (string | number)[],
    private method: BubbleSort | QuickSort | MergeSort
  ) {}

  sort(): (string | number)[] {
    return this.method.sort(this.array);
  }
}

// ----------------------------------------------------
// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–æ—Ç —Ç–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∏–ø –º–µ—Ç–æ–¥–∞ –Ω—É–∂–Ω–æ —Ä—É–∫–∞–º–∏ –ø—Ä–æ—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å (array: T[]): T[]
// –ï—Å–ª–∏ –º—ã –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø T –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫

export interface SortingMethod<T> {
  sort(array: T[]): T[];
}

class SortUniversal<T> {
  constructor(public array: T[], private method: SortingMethod<T>) {}

  sort(): T[] {
    return this.method.sort(this.array);
  }
}
